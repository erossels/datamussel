'Ingreso Materia Prima Neta Terceros':'MP Neta',
'Ingreso Materia Prima Bruta Propia':'MP Bruta',
'rechazo propio': "No aplica",
'rechazo terceros': "No aplica"
}
ingresos_mmpp['Tipo'] = ingresos_mmpp.Indicador.apply(lambda i: dict_indicadores_tipo[i])
dict_indicadores_propiedad = {
'Ingreso Materia Bruta Prima Propia':'MPB Propia',
'Ingreso Materia Prima Neta o Pagada Propia':'MPN Propia',
'Unidades por kilo mmpp propia*': "No aplica",
'Ingreso Materia Prima Bruta Terceros':'MPB Terceros',
'Ingreso Materia Prima Neta o Pagada Terceros':'MPN Terceros',
'Unidades por kilo mmpp terceros*': "No aplica",
'Ingreso Materia Prima Propia':'MPB Propia',
'Ingreso Materia Prima Neta Propia':'MPN Propia',
'Ingreso Materia Prima Terceros':'MPB Terceros',
'Ingreso Materia Prima Neta Terceros':'MPN Terceros',
'Ingreso Materia Prima Bruta Propia':'MPB Propia',
'rechazo propio': "No aplica",
'rechazo terceros': "No aplica"
}
ingresos_mmpp['Propiedad'] = ingresos_mmpp.Indicador.apply(lambda i: dict_indicadores_propiedad[i])
idx = pd.IndexSlice
##### Carga Producto Terminado
producto = pd.read_csv("Procesos_Producto_Consolidado.csv")
producto = producto[producto['Ano'] == int(ano)]
producto['Valor'] = producto['Valor'].apply(lambda v: pd.to_numeric(v, errors='coerce'))
producto['Valor'].fillna(0, inplace=True)
producto.head()
producto.Valor = [producto['Valor'].iloc[i]/1000 if producto['Unidad de medida'].iloc[i] == 'Kilos' else producto['Valor'].iloc[i] for i in range(len(producto.Valor))]
###### DOTACION
dotacion = pd.read_csv("Procesos_Dotacion_Consolidado.csv")
dotacion = dotacion[dotacion['Ano'] == int(ano)]
dotacion.Mes = dotacion.Mes.apply(lambda m: pd.to_numeric(m, errors='coerce'))
dotacion.Mes.fillna(0, inplace=True)
dict_meses = {
1:'Ene',
2:'Feb',
3:'Mar',
4:'Abr',
5:'May',
6:'Jun',
7:'Jul',
8:'Ago',
9:'Sep',
10:'Oct',
11:'Nov',
12:'Dic',
2021: '2021'
}
dict_cargos =  {
'Operarios directos (produccion)': 'Operarios Directos',
'Jefes de Turno': 'Supervisores Directos',
'Supervisores Produccion': 'Supervisores Directos',
'Operarios Indirectos (Frigorífico, Aseo, etc)': 'Personal Indirecto',
'Supervisores Calidad': 'Personal Indirecto',
'Monitores Calidad': 'Personal Indirecto',
'Operadores Mantencion y Administracion Directo Planta (Contador': 'Personal Indirecto',
'Tesorero': 'Personal Indirecto',
'Asistente Contabilidad': 'Personal Indirecto',
'Jefe RRHH': 'Personal Indirecto',
'Jefe de Adquisicion': 'Personal Indirecto',
'Prevencion de Riesgo': 'Personal Indirecto',
'Control de Gestion': 'Personal Indirecto',
'Otro cargo que su trabajo esté asociado directamente con Planta':'Otros Indirectos',
'Operarios Indirectos (Frigorifico, Aseo, etc)':'Personal Indirecto',
'Otro cargo que su trabajo esta asociado directamente con Planta':'Personal Indirecto'
}
dotacion = dotacion.loc[dotacion.Empresa != empresa]
dotacion['Grupo'] = dotacion.Cargo.apply(lambda c: dict_cargos[c])
dotacion['Tipo'] = dotacion.Grupo.apply(lambda g: 'Personal Directo' if g != 'Personal Indirecto' else g)
dotacion['Personal Planta'] = dotacion['Personal Planta Contrato Plazo Fijo'] + dotacion['Personal Planta Contrato Plazo Indefinido']
tabla = dotacion[['Tipo','Mes','Personal Planta']].pivot_table(index = 'Tipo', columns = 'Mes', aggfunc = np.sum)
tabla.loc[('Total personal')] = tabla.sum(axis=0)
columnas = [dict_meses[int(i[1])] if i[0] == 'Personal Planta' else i[0] for i in list(tabla.columns)]
tabla.columns = columnas
# Agregar columnas Toneladas MMPP Neta/Total Personal para la Industria
ton_neta = ingresos_mmpp[(ingresos_mmpp.Tipo == 'MP Neta') & (ingresos_mmpp.Empresa!=empresa)].pivot_table(index='Tipo', columns = 'Mes', values='Valor', aggfunc=np.sum)
ton_neta.columns = [dict_meses[c] for c in list(ton_neta.columns)]
tabla.loc['Ton mmpp Neta / Total Personal'] = ''
for i in list(tabla.columns):
if i in ton_neta.columns:
tabla.loc[['Ton mmpp Neta / Total Personal'],[i]] = ton_neta.loc['MP Neta'].loc[i]/(tabla.loc['Total personal'].loc[i])
ton_PT = producto.loc[producto.Empresa != empresa].pivot_table(index='Ano', columns = 'Mes', values='Valor', aggfunc=np.sum)
ton_PT.columns = [dict_meses[c] for c in list(ton_PT.columns)]
tabla.loc['Ton Neta PT / Total Personal'] = ''
for i in list(tabla.columns):
if i in ton_PT.columns:
tabla.loc[['Ton Neta PT / Total Personal'],[i]] = ton_PT.loc[int(ano)].loc[i]/(tabla.loc['Total personal'].loc[i])
#
# tabla.loc['Ton Neta PT / Total Personal'] = [ton_PT.loc[i+1].loc['Valor']/(tabla.loc['Total personal'].iloc[i]) for i in range(tabla.shape[1])]
tabla.fillna(0, inplace=True)
tabla.fillna(0, inplace=True)
tabla
contador = dotacion.groupby('Mes').Empresa.nunique()
tabla.loc['N Empresas'] = contador.values
for col in tabla.columns:
if tabla[col].loc["N Empresas"] < 3:
tabla.drop([col], axis=1, inplace=True)
tabla.fillna(0, inplace=True)
tabla['Promedio'] = tabla.mean(axis=1)
tabla.fillna(0, inplace=True)
tabla
tabla['Promedio'] = tabla.mean(axis=1)
tabla
empresa = 'Manuelita', ano = 2021
empresa = 'Data Mussel'
ano = 2021
import pandas as pd
import numpy as np
### Carga Ingresos
ingresos_mmpp = pd.read_csv("Procesos_Ingresos_Consolidado.csv")
ingresos_mmpp = ingresos_mmpp[ingresos_mmpp['Ano'] == int(ano)]
ingresos_mmpp['Valor'] = ingresos_mmpp['Valor'].apply(lambda p: pd.to_numeric(p, errors='coerce'))
ingresos_mmpp['Valor'].fillna(0, inplace=True)
ingresos_mmpp.reset_index(drop=True, inplace=True)
idx = pd.IndexSlice
# Kilos a toneladas
ingresos_mmpp['Valor'] = [ingresos_mmpp.Valor.iloc[i]/1000 if ingresos_mmpp['Unidad de medida'].iloc[i] == 'Kilos' else ingresos_mmpp.Valor.iloc[i]  for i in ingresos_mmpp.index]
ingresos_mmpp['Unidad de medida'] = ingresos_mmpp['Unidad de medida'].apply(lambda u: 'Ton' if u == 'Kilos' else u)
# Agrupacion indicadores
dict_indicadores_tipo = {
'Ingreso Materia Bruta Prima Propia':'MP Bruta',
'Ingreso Materia Prima Neta o Pagada Propia':'MP Neta',
'Unidades por kilo mmpp propia*': "No aplica",
'Ingreso Materia Prima Bruta Terceros':'MP Bruta',
'Ingreso Materia Prima Neta o Pagada Terceros':'MP Neta',
'Unidades por kilo mmpp terceros*': "No aplica",
'Ingreso Materia Prima Propia':'MP Bruta',
'Ingreso Materia Prima Neta Propia':'MP Neta',
'Ingreso Materia Prima Terceros':'MP Bruta',
'Ingreso Materia Prima Neta Terceros':'MP Neta',
'Ingreso Materia Prima Bruta Propia':'MP Bruta',
'rechazo propio': "No aplica",
'rechazo terceros': "No aplica"
}
ingresos_mmpp['Tipo'] = ingresos_mmpp.Indicador.apply(lambda i: dict_indicadores_tipo[i])
dict_indicadores_propiedad = {
'Ingreso Materia Bruta Prima Propia':'MPB Propia',
'Ingreso Materia Prima Neta o Pagada Propia':'MPN Propia',
'Unidades por kilo mmpp propia*': "No aplica",
'Ingreso Materia Prima Bruta Terceros':'MPB Terceros',
'Ingreso Materia Prima Neta o Pagada Terceros':'MPN Terceros',
'Unidades por kilo mmpp terceros*': "No aplica",
'Ingreso Materia Prima Propia':'MPB Propia',
'Ingreso Materia Prima Neta Propia':'MPN Propia',
'Ingreso Materia Prima Terceros':'MPB Terceros',
'Ingreso Materia Prima Neta Terceros':'MPN Terceros',
'Ingreso Materia Prima Bruta Propia':'MPB Propia',
'rechazo propio': "No aplica",
'rechazo terceros': "No aplica"
}
ingresos_mmpp['Propiedad'] = ingresos_mmpp.Indicador.apply(lambda i: dict_indicadores_propiedad[i])
idx = pd.IndexSlice
##### Carga Producto Terminado
producto = pd.read_csv("Procesos_Producto_Consolidado.csv")
producto = producto[producto['Ano'] == int(ano)]
producto['Valor'] = producto['Valor'].apply(lambda v: pd.to_numeric(v, errors='coerce'))
producto['Valor'].fillna(0, inplace=True)
producto.head()
producto.Valor = [producto['Valor'].iloc[i]/1000 if producto['Unidad de medida'].iloc[i] == 'Kilos' else producto['Valor'].iloc[i] for i in range(len(producto.Valor))]
###### DOTACION
dotacion = pd.read_csv("Procesos_Dotacion_Consolidado.csv")
dotacion = dotacion[dotacion['Ano'] == int(ano)]
dotacion.Mes = dotacion.Mes.apply(lambda m: pd.to_numeric(m, errors='coerce'))
dotacion.Mes.fillna(0, inplace=True)
dict_meses = {
1:'Ene',
2:'Feb',
3:'Mar',
4:'Abr',
5:'May',
6:'Jun',
7:'Jul',
8:'Ago',
9:'Sep',
10:'Oct',
11:'Nov',
12:'Dic',
}
dict_cargos =  {
'Operarios directos (produccion)': 'Operarios Directos',
'Jefes de Turno': 'Supervisores Directos',
'Supervisores Produccion': 'Supervisores Directos',
'Operarios Indirectos (Frigorífico, Aseo, etc)': 'Personal Indirecto',
'Supervisores Calidad': 'Personal Indirecto',
'Monitores Calidad': 'Personal Indirecto',
'Operadores Mantencion y Administracion Directo Planta (Contador': 'Personal Indirecto',
'Tesorero': 'Personal Indirecto',
'Asistente Contabilidad': 'Personal Indirecto',
'Jefe RRHH': 'Personal Indirecto',
'Jefe de Adquisicion': 'Personal Indirecto',
'Prevencion de Riesgo': 'Personal Indirecto',
'Control de Gestion': 'Personal Indirecto',
'Otro cargo que su trabajo esté asociado directamente con Planta':'Otros Indirectos',
'Operarios Indirectos (Frigorifico, Aseo, etc)':'Personal Indirecto',
'Otro cargo que su trabajo esta asociado directamente con Planta':'Personal Indirecto'
}
ingresos_mmpp
dotacion
dotacion = dotacion.loc[dotacion.Empresa == empresa]
dotacion
producto
dotacion['Grupo'] = dotacion.Cargo.apply(lambda c: dict_cargos[c])
dotacion['Tipo'] = dotacion.Grupo.apply(lambda g: 'Personal Directo' if g != 'Personal Indirecto' else g)
dotacion['Personal Planta'] = dotacion['Personal Planta Contrato Plazo Fijo'] + dotacion['Personal Planta Contrato Plazo Indefinido']
tabla = dotacion[['Tipo','Mes','Personal Planta']].pivot_table(index = 'Tipo', columns = 'Mes', aggfunc = np.sum)
tabla.loc[('Total personal')] = tabla.sum(axis=0)
columnas = [dict_meses[int(i[1])] if i[0] == 'Personal Planta' else i[0] for i in list(tabla.columns)]
tabla.columns = columnas
tabla
ton_neta = ingresos_mmpp[(ingresos_mmpp.Tipo == 'MP Neta') & (ingresos_mmpp.Empresa==empresa)].pivot_table(index='Empresa', columns = 'Mes', values='Valor', aggfunc=np.sum)
ton_neta.columns = [dict_meses[c] for c in list(ton_neta.columns)]
tabla.loc['Ton mmpp Neta / Total Personal'] = ''
for i in list(tabla.columns):
if i in ton_neta.columns:
tabla.loc[['Ton mmpp Neta / Total Personal'],[i]] = ton_neta.loc[empresa].loc[i]/(tabla.loc['Total personal'].loc[i])
tabla
ton_PT = producto.loc[producto.Empresa == empresa].pivot_table(index='Empresa', columns = 'Mes', values='Valor', aggfunc=np.sum)
ton_PT.columns = [dict_meses[c] for c in list(ton_PT.columns)]
tabla.loc['Ton Neta PT / Total Personal'] = ''
for i in list(tabla.columns):
if i in ton_PT.columns:
tabla.loc[['Ton Neta PT / Total Personal'],[i]] = ton_PT.loc[empresa].loc[i]/(tabla.loc['Total personal'].loc[i])
tabla
tabla.fillna(0, inplace=True)
tabla['Promedio'] = tabla.mean(axis=1)
tabla
empresa = 'Data Mussel'
empresa = 'Data Mussel'
mes = 'Ene'
ano = 2021
import pandas as pd
import numpy as np
idx = pd.IndexSlice
#Cambiar a numero
dict_mes_num = {
'Ene':1,
'Feb':2,
'Mar':3,
'Abr':4,
'May':5,
'Jun':6,
'Jul':7,
'Ago':8,
'Sep':9,
'Oct':10,
'Nov':11,
'Dic':12
}
mes = dict_mes_num[mes]
dotacion = pd.read_csv("Procesos_Dotacion_Consolidado.csv")
dotacion = dotacion[dotacion['Ano'] == int(ano)]
dotacion.Mes = dotacion.Mes.apply(lambda m: pd.to_numeric(m, errors='coerce'))
dotacion.Mes.fillna(0, inplace=True)
dotacion.head()
dict_cargos =  {
'Operarios directos (produccion)': 'Operarios Directos',
'Jefes de Turno': 'Supervisores Directos',
'Supervisores Produccion': 'Supervisores Directos',
'Operarios Indirectos (Frigorífico, Aseo, etc)': 'Personal Indirecto',
'Supervisores Calidad': 'Personal Indirecto',
'Monitores Calidad': 'Personal Indirecto',
'Operadores Mantencion y Administracion Directo Planta (Contador': 'Personal Indirecto',
'Tesorero': 'Personal Indirecto',
'Asistente Contabilidad': 'Personal Indirecto',
'Jefe RRHH': 'Personal Indirecto',
'Jefe de Adquisicion': 'Personal Indirecto',
'Prevencion de Riesgo': 'Personal Indirecto',
'Control de Gestion': 'Personal Indirecto',
'Otro cargo que su trabajo esté asociado directamente con Planta': 'Personal Indirecto',
'Operarios Indirectos (Frigorifico, Aseo, etc)':'Personal Indirecto',
'Otro cargo que su trabajo esta asociado directamente con Planta':'Personal Indirecto'
}
dotacion['Grupo'] = dotacion.Cargo.apply(lambda c: dict_cargos[c])
dotacion['Tipo'] = dotacion.Grupo.apply(lambda g: 'Personal Directo' if g != 'Personal Indirecto' else g)
dotacion['Personal Planta'] = dotacion['Personal Planta Contrato Plazo Fijo'] + dotacion['Personal Planta Contrato Plazo Indefinido']
dict_cargos_tabla = {
'Operarios directos (produccion)': 'Produccion Operarios',
'Operarios Indirectos (Frigorífico, Aseo, etc)': 'Operarios Indirectos',
'Jefes de Turno': 'Produccion Jefatura',
'Supervisores Produccion': 'Produccion Jefatura',
'Supervisores Calidad': 'Calidad',
'Monitores Calidad': 'Calidad',
'Operadores Mantencion y Administracion Directo Planta (Contador':'Otros Indirectos',
'Tesorero':'Otros Indirectos',
'Asistente Contabilidad':'Otros Indirectos',
'Jefe RRHH':'Otros Indirectos',
'Jefe de Adquisicion':'Otros Indirectos',
'Prevencion de Riesgo':'Otros Indirectos',
'Control de Gestion':'Otros Indirectos',
'Otro cargo que su trabajo esté asociado directamente con Planta':'Otros Indirectos',
'Operarios Indirectos (Frigorifico, Aseo, etc)':'Personal Indirecto',
'Otro cargo que su trabajo esta asociado directamente con Planta':'Personal Indirecto'
}
dotacion['Area'] = [ dict_cargos_tabla[ele] for ele in dotacion.Cargo]
#Contrato temporada
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
}
tabla_ct
tabla_ct.shape[1]
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'].iloc[i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'].iloc[i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'].iloc[i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'].iloc[i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'].iloc[i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
tabla_ct
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
tabla_ct
len(tabla_ct['Contrato temporada'])
tabla_ct.columns = ['Contrato temporada']
tabla_ct['Contrato temporada']
len(tabla_ct['Contrato temporada'])
tabla_ct['Contrato temporada'][0]
tabla_ct['Contrato temporada'].sum()
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
tabla_pi = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Indefinido'], aggfunc=np.sum)
tabla_pi.columns = ['Contrato indefinido']
tabla_pi['%'] = [tabla_pi['Contrato indefinido'][i]/tabla_pi['Contrato indefinido'].sum() for i in range(len(tabla_pi['Contrato indefinido']))]
tabla_pi.loc['Total personal'] = tabla_pi.sum()
tabla_p = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta'], aggfunc=np.sum)
tabla_p.columns = ['Total Planta']
tabla_p
#Personal planta
tabla_p = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta'], aggfunc=np.sum)
tabla_p.columns = ['Total Planta']
tabla_p['%'] = [tabla_p['Total Planta'][i]/tabla_p['Total Planta'].sum() for i in range(len(tabla_p['Total Planta']))]
tabla_p.loc['Total personal'] = tabla_p.sum()
tabla_personal_industria = pd.concat([tabla_ct, tabla_pi, tabla_p], axis=1)
#Contrato temporada
tabla_ct = dotacion[(dotacion.Mes == mes) & (dotacion.Empresa == empresa)].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
#Contrato indefinido
tabla_pi = dotacion[dotacion.Mes == mes & (dotacion.Empresa == empresa)].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Indefinido'], aggfunc=np.sum)
tabla_pi.columns = ['Contrato indefinido']
tabla_pi['%'] = [tabla_pi['Contrato indefinido'][i]/tabla_pi['Contrato indefinido'].sum() for i in range(len(tabla_pi['Contrato indefinido']))]
tabla_pi.loc['Total personal'] = tabla_pi['Contrato indefinido'].sum()
#Personal Planta
tabla_p = dotacion[dotacion.Mes == mes & (dotacion.Empresa == empresa)].pivot_table(index = 'Area', values = ['Personal Planta'], aggfunc=np.sum)
tabla_p.columns = ['Total Planta']
tabla_p['%'] = [tabla_p['Total Planta'][i]/tabla_p['Total Planta'].sum() for i in range(len(tabla_p['Total Planta']))]
tabla_p.loc['Total personal'] = tabla_p['Total Planta'].sum()
tabla_personal_empresa = pd.concat([tabla_ct, tabla_pi, tabla_p], axis=1)
tabla_ct = dotacion[(dotacion.Mes == mes) & (dotacion.Empresa != empresa)].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
tabla_ct.columns = ['Contrato temporada']
empresa = 'Data Mussel'
mes = 'Ene'
ano = 2021
import pandas as pd
import numpy as np
idx = pd.IndexSlice
#Cambiar a numero
dict_mes_num = {
'Ene':1,
'Feb':2,
'Mar':3,
'Abr':4,
'May':5,
'Jun':6,
'Jul':7,
'Ago':8,
'Sep':9,
'Oct':10,
'Nov':11,
'Dic':12
}
mes = dict_mes_num[mes]
dotacion = pd.read_csv("Procesos_Dotacion_Consolidado.csv")
dotacion = dotacion[dotacion['Ano'] == int(ano)]
dotacion.Mes = dotacion.Mes.apply(lambda m: pd.to_numeric(m, errors='coerce'))
dotacion.Mes.fillna(0, inplace=True)
dotacion.head()
dict_cargos =  {
'Operarios directos (produccion)': 'Operarios Directos',
'Jefes de Turno': 'Supervisores Directos',
'Supervisores Produccion': 'Supervisores Directos',
'Operarios Indirectos (Frigorífico, Aseo, etc)': 'Personal Indirecto',
'Supervisores Calidad': 'Personal Indirecto',
'Monitores Calidad': 'Personal Indirecto',
'Operadores Mantencion y Administracion Directo Planta (Contador': 'Personal Indirecto',
'Tesorero': 'Personal Indirecto',
'Asistente Contabilidad': 'Personal Indirecto',
'Jefe RRHH': 'Personal Indirecto',
'Jefe de Adquisicion': 'Personal Indirecto',
'Prevencion de Riesgo': 'Personal Indirecto',
'Control de Gestion': 'Personal Indirecto',
'Otro cargo que su trabajo esté asociado directamente con Planta': 'Personal Indirecto',
'Operarios Indirectos (Frigorifico, Aseo, etc)':'Personal Indirecto',
'Otro cargo que su trabajo esta asociado directamente con Planta':'Personal Indirecto'
}
dotacion['Grupo'] = dotacion.Cargo.apply(lambda c: dict_cargos[c])
dotacion['Tipo'] = dotacion.Grupo.apply(lambda g: 'Personal Directo' if g != 'Personal Indirecto' else g)
dotacion['Personal Planta'] = dotacion['Personal Planta Contrato Plazo Fijo'] + dotacion['Personal Planta Contrato Plazo Indefinido']
dict_cargos_tabla = {
'Operarios directos (produccion)': 'Produccion Operarios',
'Operarios Indirectos (Frigorífico, Aseo, etc)': 'Operarios Indirectos',
'Jefes de Turno': 'Produccion Jefatura',
'Supervisores Produccion': 'Produccion Jefatura',
'Supervisores Calidad': 'Calidad',
'Monitores Calidad': 'Calidad',
'Operadores Mantencion y Administracion Directo Planta (Contador':'Otros Indirectos',
'Tesorero':'Otros Indirectos',
'Asistente Contabilidad':'Otros Indirectos',
'Jefe RRHH':'Otros Indirectos',
'Jefe de Adquisicion':'Otros Indirectos',
'Prevencion de Riesgo':'Otros Indirectos',
'Control de Gestion':'Otros Indirectos',
'Otro cargo que su trabajo esté asociado directamente con Planta':'Otros Indirectos',
'Operarios Indirectos (Frigorifico, Aseo, etc)':'Personal Indirecto',
'Otro cargo que su trabajo esta asociado directamente con Planta':'Personal Indirecto'
}
dotacion['Grupo'] = dotacion.Cargo.apply(lambda c: dict_cargos[c])
dotacion['Tipo'] = dotacion.Grupo.apply(lambda g: 'Personal Directo' if g != 'Personal Indirecto' else g)
dotacion['Personal Planta'] = dotacion['Personal Planta Contrato Plazo Fijo'] + dotacion['Personal Planta Contrato Plazo Indefinido']
dict_cargos_tabla = {
'Operarios directos (produccion)': 'Produccion Operarios',
'Operarios Indirectos (Frigorífico, Aseo, etc)': 'Operarios Indirectos',
'Jefes de Turno': 'Produccion Jefatura',
'Supervisores Produccion': 'Produccion Jefatura',
'Supervisores Calidad': 'Calidad',
'Monitores Calidad': 'Calidad',
'Operadores Mantencion y Administracion Directo Planta (Contador':'Otros Indirectos',
'Tesorero':'Otros Indirectos',
'Asistente Contabilidad':'Otros Indirectos',
'Jefe RRHH':'Otros Indirectos',
'Jefe de Adquisicion':'Otros Indirectos',
'Prevencion de Riesgo':'Otros Indirectos',
'Control de Gestion':'Otros Indirectos',
'Otro cargo que su trabajo esté asociado directamente con Planta':'Otros Indirectos',
'Operarios Indirectos (Frigorifico, Aseo, etc)':'Personal Indirecto',
'Otro cargo que su trabajo esta asociado directamente con Planta':'Personal Indirecto'
}
dotacion['Area'] = [ dict_cargos_tabla[ele] for ele in dotacion.Cargo]
#Contrato temporada
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
#Contrato temporada
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else: tabla_ct = pd.DataFrame()
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
#Contrato temporada
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
tabla_ct
tabla_pi = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Indefinido'], aggfunc=np.sum)
tabla_pi
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
#Contrato temporada
tabla_ct = dotacion[dotacion.Mes == mes].pivot_table(index = 'Area', values = ['Personal Planta Contrato Plazo Fijo'], aggfunc=np.sum)
if tabla_ct.shape[1] > 0:
tabla_ct.columns = ['Contrato temporada']
tabla_ct['%'] = [tabla_ct['Contrato temporada'][i]/tabla_ct['Contrato temporada'].sum() for i in range(len(tabla_ct['Contrato temporada']))]
tabla_ct.loc['Total personal'] = tabla_ct.sum()
else:
tabla_ct = pd.DataFrame()
#Contrato indefinido
detalle_dotacion_areas(empresa = 'Data Mussel', mes = 'Ene',ano = 2021)
empresa = 'Data Mussel'
mes = 'Ene'
ano = 2021
